# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Launch Zsh
if [ -t 1 ]; then
  if type "zsh" &> /dev/null; then
    exec zsh
  fi
fi


# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# Import Other Files

## Load alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Helper Functions

exists() {
	command -v "$1" >/dev/null 2>&1
}

# Section for running programs that should execute

## Start McFly for a better command history via ctr+r
if exists mcfly; then
	eval "$(mcfly init bash)"
#else
	#echo "mcfly missing on system may want to install"
fi


## Start keychain for ssh key management
if exists keychain; then
	eval $(keychain --eval --quiet --noask)
#else
	#echo "keychain missing on system may want to install"
fi

## make less more friendly for non-text input files, see lesspipe(1)
## Here due to eval usage
if exists lesspipe; then
	eval "$(SHELL=/bin/sh lesspipe)"
fi



# Exports & variables

## Don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth
## for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

## Better defaults for less
export LESS="-F -i -J -M -R -x4 -z-4"

## Set system editor by personal preference
if exists nvim; then
	EDITOR=nvim
elif exists vim; then
	EDITOR=vim
elif exists vi; then
	EDITOR=vi
else
	EDITOR=nano
fi

## Set colors for less.
## https://wiki.archlinux.org/index.php/Color_output_in_console#less
export LESS_TERMCAP_md=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_mb=$'\e[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\e[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\e[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

# If Termux/Android then handle unique exports & variables
case "$PREFIX" 
	in
	# If Termux Shell
	*com.termux*)
		export PATH="${PATH}:~/rish/"
	;;

esac

# Shell Options

## check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s checkwinsize

## append to the history file, don't overwrite it
shopt -s histappend

## set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

## set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: $PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

# Setup completion features
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


