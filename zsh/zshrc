# Helper Functions

function __exists() {
    command -v "$1" >/dev/null 2>&1
}

autoload -Uz add-zsh-hook
autoload -Uz promptinit

# Set up the prompt

coloredBlock() {
    local bgColor = $3
    local text = $2
    eval "$1=%K{$bgColor}$text%F{$bgColor}\UE0B0%F%K'"
}

local endBlockChar="\UE0B0"

promptinit


#prompt adam1
#PROMPT=$' %K{yellow} %(!.%F{red}.%F{cyan})%~ %K%F{yellow}\UE0B0%K\n %(?.%F{cyan}.%F{red})\U25CF %(!.#.$)%f ' 

# Setup block
PROMPT='%K{green}'
# Set color for text
PROMPT+=' %(!.%F{red}.%F{black})%~ '
# End the block
PROMPT+=$'%F{green}%k\UE0B0%f'
PROMPT+=$'\n'
# Handle the last run command status
PROMPT+=$' %(?.%F{green}.%F{red})\U25CF '
PROMPT+="%(!.#.$)%f "
#coloredBlock(PROMPT, '%(!.%F{red}.%F{cyan})%~%F', 'yellow')
#RPROMPT='%(?.%F{cyan}.%F{red})'$'\U25CF'


# Set Title
function __setTitleCmd() {
    local newTitle="${1:-%2~}"
    echo -n -e "\033]0;$1\007" 
}
add-zsh-hook -Uz precmd __setTitleCmd

function __setTitleExec() {

}
add-zsh-hook -Uz preexec __setTitleExec




# Pull in aliases
if [ -f $HOME/.aliases ]; then
    source $HOME/.aliases
fi

# Load up ssh agent
if exists keychain; then
	eval $(keychain --eval --quiet --noask)
#else
	#echo "keychain missing on system may want to install"
fi


# Use vi/vim/nvim keybindings
#bindkey -v

# Use Emacs keybindings (Prevents annoyances of not knowing the current mode)
bindkey -e

# Update ctrl+backspace to delete a word
bindkey '^H' backward-kill-word

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
# Append to the history, auto cd when entering a folder path
setopt histignorealldups sharehistory
setopt appendhistory autocd extendedglob
# Don't allow for an audio bell
unsetopt beep


# Set title

# Use modern completion system
autoload -Uz compinit
compinit
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


zstyle :compinstall filename '/home/BioMyth/.zshrc'

autoload -Uz compinit
compinit

# Setup to reset the terminal state in the case of a broken command leaving some formatting behind

function __reset_broken_terminal() {
    printf '%b' '\e[0m\e(B\e)0\017\e[?5l\e7\e[0;0r\e8'
}

add-zsh-hook -Uz precmd __reset_broken_terminal

# Automatically load in new binaries after they are added, Uses unallocated sigterm call

TRAPUSR1() {rehash}

# Auto source all plugins

source $(find /usr/share/zsh/plugins/*/*.zsh -type f)


# Setup software to run

if ! pgrep -u "$USER" ssh-agent > /dev/null; then
  ssh-agent -t 1h > "$XDG_RUNTIME_DIR/ssh-agent.env"  
fi

if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
    source "$XDG_RUNTIME_DIR/ssh-agent.env" > /dev/null
fi

if __exists mcfly; then
    eval "$(mcfly init zsh)"
fi

#if __exists zellij; then
#    if [[ -z "$ZELLIJ_SESSION_NAME" ]]; then
#        zellij attach -c $USER@$(hostname)
#    fi
#fi

if __exists tmux && [ -n "${DISPLAY}" ] && [ -z "${TMUX}" ]; then
    exec tmux new-session -A -s "$USER" > /dev/null 2>&1
fi
#if __exists zellij; then
#    eval "$(zellij setup --generate-auto-start zsh)"
#fi
