syntax enable
filetype off                  " required
" set the runtime path to include Vundle and initialize
set backupdir=~/.vim/backups
set directory=~/.vim/swapfiles
set undodir=~/.vim/undofiles

" If this is regular vim, then use Vundle otherwise skip for other plugin
" management
if !has('nvim')

    set nocompatible              " be iMproved, required
	let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
	set rtp+=~/.vim/bundle/Vundle.vim

	call plug#begin()
	" alternatively, pass a path where Vundle should install plugins
	"call vundle#begin('~/some/path/here')

	" let Vundle manage Vundle, required
	Plug 'felixhummel/setcolors.vim'
	Plug 'scrooloose/nerdtree'
	Plug 'altercation/vim-colors-solarized'
	Plug 'flazz/vim-colorschemes'
	Plug 'Valloric/YouCompleteMe'
	" The following are examples of different formats supported.
	" Keep Plugin commands between vundle#begin/end.


	" All of your Plugins must be added before the following line
	call plug#end()            " required

	filetype plugin indent on    " required

	" To ignore plugin indent changes, instead use:
	"filetype plugin on
	"
	" Brief help
	" :PluginList       - lists configured plugins
	" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
	" :PluginSearch foo - searches for foo; append `!` to refresh local cache
	" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
	"
	" see :h vundle for more details or wiki for FAQ
	" Put your non-Plugin stuff after this line

	"call pathogen#runtime_append_all_bundles()
	command Tree NERDTree
	"command tree NERDTree

endif


set modelines=0

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile

set nowrap

set ignorecase
set smartcase
" set gdefault
set incsearch
set showmatch
set hlsearch
colorscheme evening

"set list
"set listchars=tab:\ ,eol:
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
command Q q!
command! W w !sudo tee % > /dev/null
"map ; :
"imap <C-BS> <C-W>
" commands to enable control+s saves
silent !stty -ixon
autocmd VimLeave * silent !stty ixon
autocmd BufWritePre * :%s/\s\+$//e
map <C-s> :w<CR> :echo "Saved" <CR>
imap <C-s> <Esc> :w <CR> :echo "Saved" <CR> i
imap <C-x> <Esc>
"map <C-S> :wq<CR>
"imap <C-S> <Esc> :wq<CR>
nmap 1 :b1<CR>
nmap 2 :b2<CR>
nmap 3 :b3<CR>
nmap 4 :b4<CR>
nmap 5 :b5<CR>
nmap 6 :b6<CR>
nmap 7 :b7<CR>
nmap 8 :b8<CR>
nmap 9 :b9<CR>


map <a-1> :tabn 1<CR>
map <a-2> :tabn 2<CR>
map <a-3> :tabn 3<CR>
map <a-4> :tabn 4<CR>
map <a-5> :tabn 5<CR>
map <a-6> :tabn 6<CR>
map <a-7> :tabn 7<CR>
map <a-8> :tabn 8<CR>
map <a-9> :tabn 9<CR>


map <a-w> <c-w>
map <a-l> <c-w>l
map <a-k> <c-w>k
map <a-j> <c-w>j
map <a-h> <c-w>h
imap <a-l> <esc><c-w>li
imap <a-k> <esc><c-w>ki
imap <a-j> <esc><c-w>ji
imap <a-h> <esc><c-w>hi

noremap <Up> <c-w>k
noremap <Down> <c-w>j
noremap <Left> <c-w>h
noremap <Right> <c-w>l

tnoremap <Esc> <C-\><C-n>


function! NrBufs()
    return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
endfunction

set statusline=
set statusline+=%#keyword#
set statusline+=%F "filepath
set statusline+=%#string#
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h "help file flag
set statusline+=%#error#
set statusline+=%m "modified flag
set statusline+=%r "read only flag
"set statusline+=%y "filetype
set statusline+=%#keyword#
set statusline+=%= "left/right separator
set statusline+=%#class#
set statusline+=%c, "cursor column
set statusline+=%l/%L\  "cursor line / total lines
set statusline+=%n:%{NrBufs()}\ "adds in the buffer number

